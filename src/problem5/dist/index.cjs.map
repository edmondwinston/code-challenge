{
  "version": 3,
  "sources": ["../src/index.ts", "../src/core/attach-middlewares.ts", "../src/middlewares/index.ts", "../src/core/attach-routes.ts", "../src/modules/account/account.controller.ts", "../src/modules/account/account.service.ts", "../src/modules/scores/scores.controller.ts", "../src/modules/scores/scores.service.ts", "../src/core/index.ts"],
  "sourcesContent": ["import express from \"express\";\nimport {configureServer} from \"./core\";\n\nconst app = express();\nconfigureServer(app);\n\n// Railway automatically injects this at runtime, and you don't even\n// have to explicitly add it in the dashboard.\nconst PORT = process.env.PORT || 8000;\n\napp.listen(PORT, () => {\n\tconsole.log(`Server is up on PORT ${PORT}`);\n});\n", "import cors from \"cors\";\nimport express, {type Application} from \"express\";\nimport session from \"express-session\";\nimport helmet from \"helmet\";\nimport passport from \"passport\";\nimport LocalStrategy from \"passport-local\";\n\nimport {errorCatcher} from \"~/middlewares\";\n\nexport function attachMiddlewares(app: Application) {\n\tapp.use(express.json());\n\tapp.use(express.urlencoded({extended: true}));\n\n\t// Helmet helps secure the service by setting various HTTP headers.\n\t// @see https://helmetjs.github.io/\n\tapp.use(helmet());\n\tapp.use(\n\t\tcors({\n\t\t\torigin: process.env.CORS_ORIGIN || \"http://localhost:3000\",\n\t\t\tcredentials: true,\n\t\t}),\n\t);\n\n\tapp.use(\n\t\tsession({\n\t\t\tname: \"session\",\n\t\t\tsecret: process.env.SESSION_SECRET || \"secret\",\n\t\t\tresave: false,\n\t\t\tsaveUninitialized: false,\n\t\t\tcookie: {\n\t\t\t\t// Secure cookie only available over https, but your localhost is http,\n\t\t\t\t// so this must be false during development.\n\t\t\t\tsecure: process.env.NODE_ENV === \"production\",\n\t\t\t},\n\t\t}),\n\t);\n\n\tapp.use(passport.session());\n\n\tpassport.use(\n\t\t\"local\",\n\t\tnew LocalStrategy.Strategy(\n\t\t\t{\n\t\t\t\tusernameField: \"email\",\n\t\t\t},\n\t\t\t(email, password, cb) => {\n\t\t\t\tconst user = {\n\t\t\t\t\tid: 1,\n\t\t\t\t\tname: \"John Doe\",\n\t\t\t\t};\n\n\t\t\t\treturn cb(null, user);\n\t\t\t},\n\t\t),\n\t);\n\n\tpassport.serializeUser((user, cb) => {\n\t\tprocess.nextTick(() => {\n\t\t\tcb(null, user);\n\t\t});\n\t});\n\n\tpassport.deserializeUser((user, cb) => {\n\t\tprocess.nextTick(() => {\n\t\t\tcb(null, user);\n\t\t});\n\t});\n\n\tapp.use(errorCatcher);\n}\n", "import type {NextFunction, Request, Response} from \"express\";\n\nexport function ensureAuthenticated(req: Request, res: Response, next: NextFunction) {\n\tif (req.isAuthenticated()) return next();\n\treturn res.status(401).json({message: \"Pardon, who are you?\"});\n}\n\nexport function errorCatcher(\n\terr: Error,\n\t_req: Request,\n\tres: Response,\n\t_next: NextFunction,\n) {\n\t// In general, you should avoid sending the error stack trace to the client,\n\t// but rather log it to a file or posta payload to a dedicated logging service.\n\t// Please consider doing something more than this.\n\tconsole.error(err);\n\treturn res.status(500).json({message: \"Come home, kitchen's on fire.\"});\n}\n", "import express, {type Application} from \"express\";\n\nimport {accountRouter} from \"~/modules/account/account.controller\";\nimport {scoresRouter} from \"~/modules/scores/scores.controller\";\n\nexport function attachRoutes(app: Application) {\n\tconst router = express.Router();\n\trouter.use(\"/account\", accountRouter);\n\trouter.use(\"/scores\", scoresRouter);\n\n\t// Path of the below `router` is prefixed with `/api/v1`,\n\t// so the full path of `accountRouter` is `/api/v1/account`.\n\tapp.use(\"/api/v1\", router);\n\n\tapp.get(\"/healthcheck\", (_, res) => {\n\t\treturn res.status(200).json({message: \"Service is healthy.\"});\n\t});\n\n\tapp.get(\"/\", (_, res) => {\n\t\treturn res\n\t\t\t.status(200)\n\t\t\t.json({message: \"Welcome to the service. This is the root path.\"});\n\t});\n}\n", "import express from \"express\";\nimport passport from \"passport\";\n\nimport {accountInfo} from \"./account.service.js\";\n\nimport {ensureAuthenticated} from \"../../middlewares/index.js\";\n\n/**\n * @base_path /api/v1/account\n */\nexport const accountRouter = express\n\t.Router()\n\t.get(\"/\", ensureAuthenticated, accountInfo)\n\t.post(\"/authenticate\", passport.authenticate(\"local\"), (req, res) => {\n\t\tif (req.isUnauthenticated()) {\n\t\t\treturn res.status(400).json({message: \"Ah, who are you again?\"});\n\t\t}\n\n\t\treturn res.status(200).json({message: \"Look who is back!\", user: req.user});\n\t});\n", "import type {Request, Response} from \"express\";\n\nexport function accountInfo(req: Request, res: Response) {\n\t// `req.user` is populated by the `passport.authenticate(\"local\")` middleware\n\t// in `account.controller.js`. In other words, if you have logged in successfully,\n\t// this `req.user` will always be available.\n\treturn res.status(200).json({message: \"Hi there!\", user: req.user});\n}\n", "import express from \"express\";\n\nimport {getScores} from \"./scores.service.js\";\n\nimport {ensureAuthenticated} from \"../../middlewares\";\n\n/**\n * @base_path /api/v1/scores\n */\nexport const scoresRouter = express\n\t.Router()\n\t.get(\"/\", getScores)\n\t.post(\"/update\", ensureAuthenticated, (req, res) => {});\n", "import type {Request, Response} from \"express\";\n\nexport function getScores(req: Request, res: Response) {\n\t// `req.user` is populated by the `passport.authenticate(\"local\")` middleware\n\t// in `account.controller.js`. In other words, if you have logged in successfully,\n\t// this `req.user` will always be available.\n\treturn res.status(200).json({message: \"Hi there!\", user: req.user});\n}\n", "import type {Application} from \"express\";\n\nimport {attachMiddlewares} from \"./attach-middlewares\";\nimport {attachRoutes} from \"./attach-routes\";\n\nexport function configureServer(app: Application) {\n\tattachMiddlewares(app);\n\tattachRoutes(app);\n}\n"],
  "mappings": "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",
  "names": ["import_express", "app", "express", "helmet", "cors", "session", "passport", "LocalStrategy", "import_express", "import_express", "import_passport", "express", "passport", "import_express", "express", "app", "express", "app", "express"]
}
